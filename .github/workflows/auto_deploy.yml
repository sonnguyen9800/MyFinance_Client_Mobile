name: Build and Release (Auto)

on:
  push:
    tags:
      - 'v*.*.*'  # Matches tags like v1.0.2
        
permissions:
  contents: write # Allow writing releases and uploading assets

jobs:
  build:
    name: Build Flutter Project
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cirruslabs/flutter:3.24.5

    steps:
      - name: Get version tag
        id: extract_tag
        run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"

      - name: Debug extracted tag
        run: |
          echo "Extracted tag: ${{ steps.extract_tag.outputs.tag }}"

      - name: Git config safe.directory
        run: git config --global --add safe.directory '*'
        
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch_name
        run: |
          echo "::set-output name=branch::$(git branch --contains ${GITHUB_SHA} | sed -n -e 's/^[* ] //p')"

      - name: Install Node.js
        run: |
          curl -sL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs

      # Clone font_awesome_flutter and configure it    
      - name: Clone font_awesome_flutter and Run configurator.sh
        run: |
          if [ -d "font_awesome_flutter" ]; then rm -rf font_awesome_flutter; fi
          
          git clone https://github.com/fluttercommunity/font_awesome_flutter.git
          flutter pub add ansicolor
          flutter pub add recase
          flutter pub add version
          cd font_awesome_flutter/util
          
          chmod +x configurator.sh
          ./configurator.sh --dynamic
          cd ..
          cd ..  

      - name: Install dependencies
        run: flutter pub get

      - name: Show Current Working Directory
        run: | 
          pwd
          ls

      - name: Remove Gradle Caches
        run: |
          rm -rf /root/.gradle/daemon
          rm -rf /root/.gradle/caches

      - name: Build APK (split abi)
        run: flutter build apk --split-per-abi --release --verbose

      - name: Build AppBundle
        run: flutter build appbundle

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          cp build/app/outputs/flutter-apk/*-release.apk artifacts/
          cp build/app/outputs/bundle/release/app-release.aab artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
            tag_name: ${{ steps.extract_tag.outputs.tag }}
            name: ${{ contains(steps.branch_name.outputs.branch, 'dev') && 'Prerelease' || 'Release' }} ${{ steps.extract_tag.outputs.tag }}
            body: |
                ## Release Notes
                This is a ${{ contains(steps.branch_name.outputs.branch, 'dev') && 'prerelease' || 'release' }} for tag **${{ steps.extract_tag.outputs.tag }}**.
            files: |
                artifacts/*-release.apk
                artifacts/app-release.aab
            draft: false
            prerelease: ${{ contains(steps.branch_name.outputs.branch, 'dev') }}

      - name: Upload APK to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apks
          path: artifacts/*-release.apk
  
      - name: Upload AAB to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: artifacts/*.aab