name: Build and Release Version (Auto)

on:
  push:
    tags:
      - 'v*' # Trigger on all tags starting with 'v'

permissions:
  contents: write # Allow writing releases and uploading assets

jobs:
  build:
    name: Build Flutter Project
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cirruslabs/flutter:3.24.5

    steps:
      - name: Get version tag
        id: extract_tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::set-output name=tag::${TAG}"
            echo "::set-output name=prerelease::false"
            echo "::set-output name=title::Release: ${TAG}"
            echo "::set-output name=body::## Release Notes\n\nThis is a release for version **${TAG}**."
          elif [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-.*$ ]]; then
            echo "::set-output name=tag::${TAG}"
            echo "::set-output name=prerelease::true"
            echo "::set-output name=title::Pre-release: ${TAG}"
            echo "::set-output name=body::## Pre-release Notes\n\nThis is a pre-release for version **${TAG}**."
          else
            echo "Invalid tag format: ${TAG}"
            exit 1
          fi

      - name: Git config safe.directory
        run: git config --global --add safe.directory '*'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        run: |
          curl -sL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs

      # Clone font_awesome_flutter and configure it
      - name: Clone font_awesome_flutter and Run configurator.sh
        run: |
          if [ -d "font_awesome_flutter" ]; then rm -rf font_awesome_flutter; fi
          git clone https://github.com/fluttercommunity/font_awesome_flutter.git
          flutter pub add ansicolor
          flutter pub add recase
          flutter pub add version
          cd font_awesome_flutter/util
          chmod +x configurator.sh
          ./configurator.sh --dynamic
          cd .. && cd ..

      - name: Generate icon packs
        run: dart run flutter_iconpicker:generate_packs --packs fontAwesomeIcons

      - name: Install dependencies
        run: flutter pub get

      - name: Show Current Working Directory
        run: |
          pwd
          ls

      - name: Remove Gradle Caches
        run: |
          rm -rf /root/.gradle/daemon
          rm -rf /root/.gradle/caches

      - name: Build APK (split abi)
        run: flutter build apk --split-per-abi --release --verbose

      - name: Build AppBundle
        run: flutter build appbundle

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          cp build/app/outputs/flutter-apk/*-release.apk artifacts/
          cp build/app/outputs/bundle/release/app-release.aab artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract_tag.outputs.tag }}
          name: ${{ steps.extract_tag.outputs.title }}
          body: ${{ steps.extract_tag.outputs.body }}
          files: |
            artifacts/*.apk
            artifacts/*.aab
          draft: false
          prerelease: ${{ steps.extract_tag.outputs.prerelease }}

      - name: Upload APK to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apks
          path: artifacts/*.apk

      - name: Upload AAB to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: artifacts/*.aab
